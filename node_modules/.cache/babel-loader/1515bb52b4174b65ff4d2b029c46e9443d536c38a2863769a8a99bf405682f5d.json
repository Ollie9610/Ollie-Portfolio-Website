{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ollie\\\\OneDrive\\\\Desktop\\\\Personal Portfolio Site\\\\src\\\\contexts\\\\DataContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext(undefined);\nexport const useData = () => {\n  _s();\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n_s(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const DataProvider = ({\n  children\n}) => {\n  _s2();\n  const [projects, setProjects] = useState([]);\n  const [experiences, setExperiences] = useState([]);\n  const [skills, setSkills] = useState([]);\n  useEffect(() => {\n    // Load data from localStorage or use default data\n    const loadData = () => {\n      try {\n        const savedProjects = localStorage.getItem('portfolio_projects');\n        const savedExperiences = localStorage.getItem('portfolio_experiences');\n        const savedSkills = localStorage.getItem('portfolio_skills');\n        if (savedProjects) {\n          const projects = JSON.parse(savedProjects).map(project => ({\n            ...project,\n            category: project.category\n          }));\n          setProjects(projects);\n        } else {\n          // Load default data\n          import('../data/projects.json').then(data => {\n            const projects = data.projects.map(project => ({\n              ...project,\n              category: project.category\n            }));\n            setProjects(projects);\n            localStorage.setItem('portfolio_projects', JSON.stringify(projects));\n          });\n        }\n        if (savedExperiences) {\n          setExperiences(JSON.parse(savedExperiences));\n        } else {\n          import('../data/experiences.json').then(data => {\n            setExperiences(data.experiences);\n            localStorage.setItem('portfolio_experiences', JSON.stringify(data.experiences));\n          });\n        }\n        if (savedSkills) {\n          setSkills(JSON.parse(savedSkills));\n        } else {\n          import('../data/skills.json').then(data => {\n            setSkills(data.skills);\n            localStorage.setItem('portfolio_skills', JSON.stringify(data.skills));\n          });\n        }\n      } catch (error) {\n        console.error('Error loading data:', error);\n      }\n    };\n    loadData();\n  }, []);\n  const updateProjects = newProjects => {\n    setProjects(newProjects);\n    localStorage.setItem('portfolio_projects', JSON.stringify(newProjects));\n  };\n  const updateExperiences = newExperiences => {\n    setExperiences(newExperiences);\n    localStorage.setItem('portfolio_experiences', JSON.stringify(newExperiences));\n  };\n  const updateSkills = newSkills => {\n    setSkills(newSkills);\n    localStorage.setItem('portfolio_skills', JSON.stringify(newSkills));\n  };\n  const addProject = project => {\n    const newProjects = [...projects, {\n      ...project,\n      id: Math.max(...projects.map(p => p.id), 0) + 1\n    }];\n    updateProjects(newProjects);\n  };\n  const updateProject = (id, project) => {\n    const newProjects = projects.map(p => p.id === id ? {\n      ...project,\n      id\n    } : p);\n    updateProjects(newProjects);\n  };\n  const deleteProject = id => {\n    const newProjects = projects.filter(p => p.id !== id);\n    updateProjects(newProjects);\n  };\n  const addExperience = experience => {\n    const newExperiences = [...experiences, {\n      ...experience,\n      id: Math.max(...experiences.map(e => e.id), 0) + 1\n    }];\n    updateExperiences(newExperiences);\n  };\n  const updateExperience = (id, experience) => {\n    const newExperiences = experiences.map(e => e.id === id ? {\n      ...experience,\n      id\n    } : e);\n    updateExperiences(newExperiences);\n  };\n  const deleteExperience = id => {\n    const newExperiences = experiences.filter(e => e.id !== id);\n    updateExperiences(newExperiences);\n  };\n  const addSkill = skill => {\n    const newSkills = [...skills, skill];\n    updateSkills(newSkills);\n  };\n  const updateSkill = (name, skill) => {\n    const newSkills = skills.map(s => s.name === name ? skill : s);\n    updateSkills(newSkills);\n  };\n  const deleteSkill = name => {\n    const newSkills = skills.filter(s => s.name !== name);\n    updateSkills(newSkills);\n  };\n  const value = {\n    projects,\n    experiences,\n    skills,\n    updateProjects,\n    updateExperiences,\n    updateSkills,\n    addProject,\n    updateProject,\n    deleteProject,\n    addExperience,\n    updateExperience,\n    deleteExperience,\n    addSkill,\n    updateSkill,\n    deleteSkill\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s2(DataProvider, \"TmEWgWc1jGgbW928RgcowiaWT9o=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","DataContext","undefined","useData","_s","context","Error","DataProvider","children","_s2","projects","setProjects","experiences","setExperiences","skills","setSkills","loadData","savedProjects","localStorage","getItem","savedExperiences","savedSkills","JSON","parse","map","project","category","then","data","setItem","stringify","error","console","updateProjects","newProjects","updateExperiences","newExperiences","updateSkills","newSkills","addProject","id","Math","max","p","updateProject","deleteProject","filter","addExperience","experience","e","updateExperience","deleteExperience","addSkill","skill","updateSkill","name","s","deleteSkill","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ollie/OneDrive/Desktop/Personal Portfolio Site/src/contexts/DataContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Project } from '../types';\n\ninterface Experience {\n  id: number;\n  title: string;\n  company: string;\n  duration: string;\n  location: string;\n  description: string;\n  achievements: string[];\n  technologies: string[];\n}\n\ninterface Skill {\n  name: string;\n  level: number;\n  category: 'Technical' | 'Analytical' | 'Tools' | 'Soft Skills';\n}\n\ninterface Profile {\n  name: string;\n  title: string;\n  location: string;\n  email: string;\n  phone: string;\n  profileImage: string;\n  bio: string;\n}\n\ninterface DataContextType {\n  projects: Project[];\n  experiences: Experience[];\n  skills: Skill[];\n  updateProjects: (projects: Project[]) => void;\n  updateExperiences: (experiences: Experience[]) => void;\n  updateSkills: (skills: Skill[]) => void;\n  addProject: (project: Project) => void;\n  updateProject: (id: number, project: Project) => void;\n  deleteProject: (id: number) => void;\n  addExperience: (experience: Experience) => void;\n  updateExperience: (id: number, experience: Experience) => void;\n  deleteExperience: (id: number) => void;\n  addSkill: (skill: Skill) => void;\n  updateSkill: (name: string, skill: Skill) => void;\n  deleteSkill: (name: string) => void;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n\ninterface DataProviderProps {\n  children: React.ReactNode;\n}\n\nexport const DataProvider: React.FC<DataProviderProps> = ({ children }) => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [experiences, setExperiences] = useState<Experience[]>([]);\n  const [skills, setSkills] = useState<Skill[]>([]);\n\n  useEffect(() => {\n    // Load data from localStorage or use default data\n    const loadData = () => {\n      try {\n        const savedProjects = localStorage.getItem('portfolio_projects');\n        const savedExperiences = localStorage.getItem('portfolio_experiences');\n        const savedSkills = localStorage.getItem('portfolio_skills');\n\n        if (savedProjects) {\n          const projects = JSON.parse(savedProjects).map((project: any) => ({\n            ...project,\n            category: project.category as 'project' | 'dashboard'\n          }));\n          setProjects(projects);\n        } else {\n          // Load default data\n          import('../data/projects.json').then(data => {\n            const projects = data.projects.map(project => ({\n              ...project,\n              category: project.category as 'project' | 'dashboard'\n            }));\n            setProjects(projects);\n            localStorage.setItem('portfolio_projects', JSON.stringify(projects));\n          });\n        }\n\n        if (savedExperiences) {\n          setExperiences(JSON.parse(savedExperiences));\n        } else {\n          import('../data/experiences.json').then(data => {\n            setExperiences(data.experiences);\n            localStorage.setItem('portfolio_experiences', JSON.stringify(data.experiences));\n          });\n        }\n\n        if (savedSkills) {\n          setSkills(JSON.parse(savedSkills));\n        } else {\n          import('../data/skills.json').then(data => {\n            setSkills(data.skills as Skill[]);\n            localStorage.setItem('portfolio_skills', JSON.stringify(data.skills));\n          });\n        }\n      } catch (error) {\n        console.error('Error loading data:', error);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  const updateProjects = (newProjects: Project[]) => {\n    setProjects(newProjects);\n    localStorage.setItem('portfolio_projects', JSON.stringify(newProjects));\n  };\n\n  const updateExperiences = (newExperiences: Experience[]) => {\n    setExperiences(newExperiences);\n    localStorage.setItem('portfolio_experiences', JSON.stringify(newExperiences));\n  };\n\n  const updateSkills = (newSkills: Skill[]) => {\n    setSkills(newSkills);\n    localStorage.setItem('portfolio_skills', JSON.stringify(newSkills));\n  };\n\n  const addProject = (project: Project) => {\n    const newProjects = [...projects, { ...project, id: Math.max(...projects.map(p => p.id), 0) + 1 }];\n    updateProjects(newProjects);\n  };\n\n  const updateProject = (id: number, project: Project) => {\n    const newProjects = projects.map(p => p.id === id ? { ...project, id } : p);\n    updateProjects(newProjects);\n  };\n\n  const deleteProject = (id: number) => {\n    const newProjects = projects.filter(p => p.id !== id);\n    updateProjects(newProjects);\n  };\n\n  const addExperience = (experience: Experience) => {\n    const newExperiences = [...experiences, { ...experience, id: Math.max(...experiences.map(e => e.id), 0) + 1 }];\n    updateExperiences(newExperiences);\n  };\n\n  const updateExperience = (id: number, experience: Experience) => {\n    const newExperiences = experiences.map(e => e.id === id ? { ...experience, id } : e);\n    updateExperiences(newExperiences);\n  };\n\n  const deleteExperience = (id: number) => {\n    const newExperiences = experiences.filter(e => e.id !== id);\n    updateExperiences(newExperiences);\n  };\n\n  const addSkill = (skill: Skill) => {\n    const newSkills = [...skills, skill];\n    updateSkills(newSkills);\n  };\n\n  const updateSkill = (name: string, skill: Skill) => {\n    const newSkills = skills.map(s => s.name === name ? skill : s);\n    updateSkills(newSkills);\n  };\n\n  const deleteSkill = (name: string) => {\n    const newSkills = skills.filter(s => s.name !== name);\n    updateSkills(newSkills);\n  };\n\n  const value = {\n    projects,\n    experiences,\n    skills,\n    updateProjects,\n    updateExperiences,\n    updateSkills,\n    addProject,\n    updateProject,\n    deleteProject,\n    addExperience,\n    updateExperience,\n    deleteExperience,\n    addSkill,\n    updateSkill,\n    deleteSkill\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}